import { RangeConstraint } from '../../../common/constraint/range';
import { createNumberFormatter } from '../../../common/converter/number';
import { ValueMap } from '../../../common/model/value-map';
import { connectValues } from '../../../common/model/value-sync';
import { createValue } from '../../../common/model/values';
import { NumberTextController } from '../../../common/number/controller/number-text';
import { Color } from '../model/color';
import { appendAlphaComponent, removeAlphaComponent, } from '../model/color-model';
import { getBaseStepForColor } from '../util';
import { ColorTextView } from '../view/color-text';
const FORMATTER = createNumberFormatter(0);
const MODE_TO_CONSTRAINT_MAP = {
    rgb: () => {
        return new RangeConstraint({ min: 0, max: 255 });
    },
    hsl: (index) => {
        return index === 0
            ? new RangeConstraint({ min: 0, max: 360 })
            : new RangeConstraint({ min: 0, max: 100 });
    },
    hsv: (index) => {
        return index === 0
            ? new RangeConstraint({ min: 0, max: 360 })
            : new RangeConstraint({ min: 0, max: 100 });
    },
};
function createComponentController(doc, config, index) {
    return new NumberTextController(doc, {
        arrayPosition: index === 0 ? 'fst' : index === 3 - 1 ? 'lst' : 'mid',
        baseStep: getBaseStepForColor(false),
        parser: config.parser,
        props: ValueMap.fromObject({
            draggingScale: 1,
            formatter: FORMATTER,
        }),
        value: createValue(0, {
            constraint: MODE_TO_CONSTRAINT_MAP[config.colorMode](index),
        }),
        viewProps: config.viewProps,
    });
}
/**
 * @hidden
 */
export class ColorTextController {
    constructor(doc, config) {
        this.onModeSelectChange_ = this.onModeSelectChange_.bind(this);
        this.parser_ = config.parser;
        this.value = config.value;
        this.viewProps = config.viewProps;
        this.colorMode = createValue(this.value.rawValue.mode);
        this.ccs_ = this.createComponentControllers_(doc);
        this.view = new ColorTextView(doc, {
            colorMode: this.colorMode,
            textViews: [this.ccs_[0].view, this.ccs_[1].view, this.ccs_[2].view],
        });
        this.view.modeSelectElement.addEventListener('change', this.onModeSelectChange_);
    }
    createComponentControllers_(doc) {
        const cc = {
            colorMode: this.colorMode.rawValue,
            parser: this.parser_,
            viewProps: this.viewProps,
        };
        const ccs = [
            createComponentController(doc, cc, 0),
            createComponentController(doc, cc, 1),
            createComponentController(doc, cc, 2),
        ];
        ccs.forEach((cs, index) => {
            connectValues({
                primary: this.value,
                secondary: cs.value,
                forward: (p) => {
                    return p.rawValue.getComponents(this.colorMode.rawValue)[index];
                },
                backward: (p, s) => {
                    const pickedMode = this.colorMode.rawValue;
                    const comps = p.rawValue.getComponents(pickedMode);
                    comps[index] = s.rawValue;
                    return new Color(appendAlphaComponent(removeAlphaComponent(comps), comps[3]), pickedMode);
                },
            });
        });
        return ccs;
    }
    onModeSelectChange_(ev) {
        const selectElem = ev.currentTarget;
        this.colorMode.rawValue = selectElem.value;
        this.ccs_ = this.createComponentControllers_(this.view.element.ownerDocument);
        this.view.textViews = [
            this.ccs_[0].view,
            this.ccs_[1].view,
            this.ccs_[2].view,
        ];
    }
}
