import { constrainRange, loopRange } from '../../../common/number-util';
import { isEmpty } from '../../../misc/type-util';
import { appendAlphaComponent, convertColorMode, removeAlphaComponent, } from './color-model';
const CONSTRAINT_MAP = {
    hsl: (comps) => {
        var _a;
        return [
            loopRange(comps[0], 360),
            constrainRange(comps[1], 0, 100),
            constrainRange(comps[2], 0, 100),
            constrainRange((_a = comps[3]) !== null && _a !== void 0 ? _a : 1, 0, 1),
        ];
    },
    hsv: (comps) => {
        var _a;
        return [
            loopRange(comps[0], 360),
            constrainRange(comps[1], 0, 100),
            constrainRange(comps[2], 0, 100),
            constrainRange((_a = comps[3]) !== null && _a !== void 0 ? _a : 1, 0, 1),
        ];
    },
    rgb: (comps) => {
        var _a;
        return [
            constrainRange(comps[0], 0, 255),
            constrainRange(comps[1], 0, 255),
            constrainRange(comps[2], 0, 255),
            constrainRange((_a = comps[3]) !== null && _a !== void 0 ? _a : 1, 0, 1),
        ];
    },
};
function isRgbColorComponent(obj, key) {
    if (typeof obj !== 'object' || isEmpty(obj)) {
        return false;
    }
    return key in obj && typeof obj[key] === 'number';
}
/**
 * @hidden
 */
export class Color {
    constructor(comps, mode) {
        this.mode_ = mode;
        this.comps_ = CONSTRAINT_MAP[mode](comps);
    }
    static black() {
        return new Color([0, 0, 0], 'rgb');
    }
    static fromObject(obj) {
        const comps = 'a' in obj ? [obj.r, obj.g, obj.b, obj.a] : [obj.r, obj.g, obj.b];
        return new Color(comps, 'rgb');
    }
    static toRgbaObject(color) {
        return color.toRgbaObject();
    }
    static isRgbColorObject(obj) {
        return (isRgbColorComponent(obj, 'r') &&
            isRgbColorComponent(obj, 'g') &&
            isRgbColorComponent(obj, 'b'));
    }
    static isRgbaColorObject(obj) {
        return this.isRgbColorObject(obj) && isRgbColorComponent(obj, 'a');
    }
    static isColorObject(obj) {
        return this.isRgbColorObject(obj);
    }
    static equals(v1, v2) {
        if (v1.mode_ !== v2.mode_) {
            return false;
        }
        const comps1 = v1.comps_;
        const comps2 = v2.comps_;
        for (let i = 0; i < comps1.length; i++) {
            if (comps1[i] !== comps2[i]) {
                return false;
            }
        }
        return true;
    }
    get mode() {
        return this.mode_;
    }
    getComponents(opt_mode) {
        return appendAlphaComponent(convertColorMode(removeAlphaComponent(this.comps_), this.mode_, opt_mode || this.mode_), this.comps_[3]);
    }
    toRgbaObject() {
        const rgbComps = this.getComponents('rgb');
        return {
            r: rgbComps[0],
            g: rgbComps[1],
            b: rgbComps[2],
            a: rgbComps[3],
        };
    }
}
