import { insertElementAt, removeElement } from '../../../common/dom-util';
import { createValue } from '../../../common/model/values';
import { RackLikeController } from '../../common/controller/rack-like';
import { NestedOrderedSet, } from '../../common/model/nested-ordered-set';
import { RackController } from '../../rack/controller/rack';
import { TabView } from '../view/tab';
export class TabController extends RackLikeController {
    constructor(doc, config) {
        const cr = new RackController(doc, {
            blade: config.blade,
            viewProps: config.viewProps,
        });
        const empty = createValue(true);
        super({
            blade: config.blade,
            rackController: cr,
            view: new TabView(doc, {
                contentsElement: cr.view.element,
                empty: empty,
                viewProps: config.viewProps,
            }),
        });
        this.onPageAdd_ = this.onPageAdd_.bind(this);
        this.onPageRemove_ = this.onPageRemove_.bind(this);
        this.onPageSelectedChange_ = this.onPageSelectedChange_.bind(this);
        this.pageSet_ = new NestedOrderedSet(() => null);
        this.pageSet_.emitter.on('add', this.onPageAdd_);
        this.pageSet_.emitter.on('remove', this.onPageRemove_);
        this.empty_ = empty;
        this.applyPages_();
    }
    get pageSet() {
        return this.pageSet_;
    }
    add(pc, opt_index) {
        this.pageSet_.add(pc, opt_index !== null && opt_index !== void 0 ? opt_index : this.pageSet_.items.length);
    }
    remove(index) {
        this.pageSet_.remove(this.pageSet_.items[index]);
    }
    applyPages_() {
        this.keepSelection_();
        this.empty_.rawValue = this.pageSet_.items.length === 0;
    }
    onPageAdd_(ev) {
        const pc = ev.item;
        insertElementAt(this.view.itemsElement, pc.itemController.view.element, ev.index);
        this.rackController.rack.add(pc.contentController, ev.index);
        pc.props.value('selected').emitter.on('change', this.onPageSelectedChange_);
        this.applyPages_();
    }
    onPageRemove_(ev) {
        const pc = ev.item;
        removeElement(pc.itemController.view.element);
        this.rackController.rack.remove(pc.contentController);
        pc.props
            .value('selected')
            .emitter.off('change', this.onPageSelectedChange_);
        this.applyPages_();
    }
    keepSelection_() {
        if (this.pageSet_.items.length === 0) {
            return;
        }
        const firstSelIndex = this.pageSet_.items.findIndex((pc) => pc.props.get('selected'));
        if (firstSelIndex < 0) {
            this.pageSet_.items.forEach((pc, i) => {
                pc.props.set('selected', i === 0);
            });
        }
        else {
            this.pageSet_.items.forEach((pc, i) => {
                pc.props.set('selected', i === firstSelIndex);
            });
        }
    }
    onPageSelectedChange_(ev) {
        if (ev.rawValue) {
            const index = this.pageSet_.items.findIndex((pc) => pc.props.value('selected') === ev.sender);
            this.pageSet_.items.forEach((pc, i) => {
                pc.props.set('selected', i === index);
            });
        }
        else {
            this.keepSelection_();
        }
    }
}
