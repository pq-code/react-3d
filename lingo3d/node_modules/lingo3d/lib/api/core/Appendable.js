import { Disposable } from "@lincode/promiselikes";
import { emitSceneChange } from "../../events/onSceneChange";
export const appendableRoot = new Set();
export default class Appendable extends Disposable {
    constructor(outerObject3d) {
        super();
        this.outerObject3d = outerObject3d;
        outerObject3d.userData.manager = this;
        appendableRoot.add(this);
        emitSceneChange();
    }
    get uuid() {
        return this.outerObject3d.uuid;
    }
    _append(child) {
        var _a, _b, _c;
        appendableRoot.delete(child);
        emitSceneChange();
        (_b = (_a = child.parent) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.delete(child);
        child.parent = this;
        ((_c = this.children) !== null && _c !== void 0 ? _c : (this.children = new Set())).add(child);
    }
    append(child) {
        this._append(child);
        this.outerObject3d.add(child.outerObject3d);
    }
    attach(child) {
        this._append(child);
        this.outerObject3d.attach(child.outerObject3d);
    }
    dispose() {
        var _a, _b, _c;
        super.dispose();
        appendableRoot.delete(this);
        emitSceneChange();
        (_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.delete(this);
        this.parent = undefined;
        (_c = this.outerObject3d.parent) === null || _c === void 0 ? void 0 : _c.remove(this.outerObject3d);
        if (this.children)
            for (const child of this.children)
                child.dispose();
        return this;
    }
}
