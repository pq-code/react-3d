import { Cancellable } from "@lincode/promiselikes";
import { createEffect } from "@lincode/reactivity";
import { loop, timer } from "../../engine/eventLoop";
import Appendable from "./Appendable";
export default class EventLoopItem extends Appendable {
    timer(time, repeat, cb) {
        return this.watch(timer(time, repeat, cb));
    }
    loop(cb) {
        return this.watch(loop(cb));
    }
    queueMicrotask(cb) {
        queueMicrotask(() => !this.done && cb());
    }
    cancellable(cb) {
        return this.watch(new Cancellable(cb));
    }
    createEffect(cb, getStates) {
        return this.watch(createEffect(cb, getStates));
    }
    get onLoop() {
        return this._onLoop;
    }
    set onLoop(cb) {
        var _a;
        this._onLoop = cb;
        (_a = this._loopHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        cb && (this._loopHandle = this.loop(cb));
    }
}
