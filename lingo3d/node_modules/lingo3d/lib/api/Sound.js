import { Disposable, Resolvable } from "@lincode/promiselikes";
import { soundDefaults, soundSchema } from "../interface/ISound";
export class Sound extends Disposable {
    constructor() {
        super(...arguments);
        this._paused = true;
        this.soundResolvable = new Resolvable();
    }
    dispose() {
        var _a, _b;
        super.dispose();
        (_a = this.sound) === null || _a === void 0 ? void 0 : _a.stop();
        (_b = this.sound) === null || _b === void 0 ? void 0 : _b.unload();
        return this;
    }
    get paused() {
        return this._paused;
    }
    set paused(val) {
        this._paused = val;
        if (val)
            this.play();
        else
            this.pause();
    }
    get src() {
        return this._src;
    }
    set src(src) {
        var _a;
        this._src = src;
        (_a = this.sound) === null || _a === void 0 ? void 0 : _a.stop();
        this.sound = undefined;
        this.soundResolvable.done && (this.soundResolvable = new Resolvable());
        src && import("howler").then(module => {
            if (this.done || src !== this.src)
                return;
            this.sound = new module.default.Howl({
                src,
                onplay: this.onPlay,
                onpause: this.onPause,
                onend: this.onEnded,
                loop: this._loop,
                autoplay: this._autoplay,
                mute: this._muted,
                rate: this._playbackRate,
                volume: this._volume,
                html5: this.stream
            });
            this.soundResolvable.resolve(this.sound);
        });
    }
    get loop() {
        return this._loop;
    }
    set loop(loop) {
        var _a;
        this._loop = loop;
        (_a = this.sound) === null || _a === void 0 ? void 0 : _a.loop(!!loop);
    }
    get autoplay() {
        return this._autoplay;
    }
    set autoplay(autoplay) {
        this._autoplay = autoplay;
        autoplay && this.play();
    }
    get muted() {
        return this._muted;
    }
    set muted(muted) {
        var _a;
        this._muted = muted;
        (_a = this.sound) === null || _a === void 0 ? void 0 : _a.mute(!!muted);
    }
    get playbackRate() {
        return this._playbackRate;
    }
    set playbackRate(playbackRate) {
        var _a;
        this._playbackRate = playbackRate;
        (_a = this.sound) === null || _a === void 0 ? void 0 : _a.rate(playbackRate !== null && playbackRate !== void 0 ? playbackRate : 1);
    }
    get volume() {
        return this._volume;
    }
    set volume(volume) {
        var _a;
        this._volume = volume;
        (_a = this.sound) === null || _a === void 0 ? void 0 : _a.volume(volume !== null && volume !== void 0 ? volume : 1);
    }
    get duration() {
        var _a;
        return (_a = this.sound) === null || _a === void 0 ? void 0 : _a.duration();
    }
    fade(from, to, duration = 1000) {
        this.soundResolvable.then(sound => sound.fade(from, to, duration));
    }
    play() {
        this.soundResolvable.then(sound => sound.play());
        this._paused = false;
    }
    pause() {
        this.soundResolvable.then(sound => sound.pause());
        this._paused = true;
    }
    stop() {
        this.soundResolvable.then(sound => sound.stop());
        this._paused = true;
    }
}
Sound.componentName = "sound";
Sound.defaults = soundDefaults;
Sound.schema = soundSchema;
