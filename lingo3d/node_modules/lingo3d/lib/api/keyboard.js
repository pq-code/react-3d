import { event } from "@lincode/events";
import { Group } from "three";
import { keyboardDefaults, keyboardSchema } from "../interface/IKeyboard";
import { loop } from "../engine/eventLoop";
import EventLoopItem from "./core/EventLoopItem";
import { createEffect } from "@lincode/reactivity";
import { getSelectionBlockKeyboard } from "../states/useSelectionBlockKeyboard";
import { appendableRoot } from "./core/Appendable";
import { getEditorActive } from "../states/useEditorActive";
import { onKeyClear } from "../events/onKeyClear";
const [emitDown, onDown] = event();
const [emitUp, onUp] = event();
const [emitPress, onPress] = event();
export const isPressed = new Set();
const processKey = (str) => {
    str = str.length === 1 ? str.toLowerCase() : str;
    if (str === " ")
        str = "Space";
    return str;
};
createEffect(() => {
    if (getEditorActive() && getSelectionBlockKeyboard())
        return;
    const handle = loop(() => isPressed.size > 0 && emitPress());
    const handleKeyDown = (e) => {
        const key = processKey(e.key);
        isPressed.add(key);
        emitDown(key);
    };
    const handleKeyUp = (e) => {
        const key = processKey(e.key);
        isPressed.delete(key);
        emitUp(key);
        !isPressed.size && emitPress();
    };
    handle.watch(onKeyClear(() => {
        if (!isPressed.size)
            return;
        const pressed = [...isPressed];
        isPressed.clear();
        for (const key of pressed)
            emitUp(key);
    }));
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);
    return () => {
        handle.cancel();
        document.removeEventListener("keydown", handleKeyDown);
        document.removeEventListener("keyup", handleKeyUp);
    };
}, [getEditorActive, getSelectionBlockKeyboard]);
export class Keyboard extends EventLoopItem {
    constructor() {
        super(new Group());
        this.watch(onPress(() => {
            if (!this.onKeyPress)
                return;
            if (!isPressed.size) {
                this.onKeyPress("", isPressed);
                return;
            }
            for (const key of isPressed)
                this.onKeyPress(key, isPressed);
        }));
        this.watch(onUp(key => { var _a; return (_a = this.onKeyUp) === null || _a === void 0 ? void 0 : _a.call(this, key, isPressed); }));
        this.watch(onDown(key => { var _a; return (_a = this.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(this, key, isPressed); }));
    }
}
Keyboard.componentName = "keyboard";
Keyboard.defaults = keyboardDefaults;
Keyboard.schema = keyboardSchema;
const keyboard = new Keyboard();
appendableRoot.delete(keyboard);
export default keyboard;
