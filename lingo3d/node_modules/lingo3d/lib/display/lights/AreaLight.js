import { Color, Group, RectAreaLight } from "three";
import { RectAreaLightHelper } from "three/examples/jsm/helpers/RectAreaLightHelper";
import { areaLightDefaults, areaLightSchema } from "../../interface/IAreaLight";
import { lazy } from "@lincode/utils";
import ObjectManager from "../core/ObjectManager";
import { getCamera } from "../../states/useCamera";
import mainCamera from "../../engine/mainCamera";
import scene from "../../engine/scene";
import { scaleDown } from "../../engine/constants";
import { getTransformControlsMode } from "../../states/useTransformControlsMode";
import { onTransformControls } from "../../events/onTransformControls";
import { Reactive } from "@lincode/reactivity";
import { getSelectionTarget } from "../../states/useSelectionTarget";
const lazyInit = lazy(async () => {
    const { RectAreaLightUniformsLib } = await import("three/examples/jsm/lights/RectAreaLightUniformsLib.js");
    RectAreaLightUniformsLib.init();
});
export default class default_1 extends ObjectManager {
    constructor() {
        super(new Group());
        this.helperState = new Reactive(true);
        (async () => {
            await lazyInit();
            if (this.done)
                return;
            const light = this.light = new RectAreaLight(this._color, this._intensity, this.width * this.scaleX * scaleDown, this.height * this.scaleY * scaleDown);
            this.object3d.add(light);
            this.then(() => light.dispose());
            this.createEffect(() => {
                if (getTransformControlsMode() !== "scale" || getSelectionTarget() !== this)
                    return;
                const handle = onTransformControls(() => {
                    const { x, y } = this.outerObject3d.scale;
                    console.log(x, y);
                    this.scaleX = x;
                    this.scaleY = y;
                });
                return () => {
                    handle.cancel();
                };
            }, [getTransformControlsMode, getSelectionTarget]);
            this.createEffect(() => {
                if (getCamera() !== mainCamera || !this.helperState.get())
                    return;
                const helper = new RectAreaLightHelper(light);
                scene.add(helper);
                return () => {
                    helper.dispose();
                    scene.remove(helper);
                };
            }, [getCamera, this.helperState.get]);
        })();
    }
    get helper() {
        return this.helperState.get();
    }
    set helper(val) {
        this.helperState.set(val);
    }
    lookAt(target) {
        super.lookAt(target);
        this.rotationY += 180;
    }
    get color() {
        var _a;
        return (_a = this._color) !== null && _a !== void 0 ? _a : areaLightDefaults.color;
    }
    set color(val) {
        this._color = val;
        this.light && (this.light.color = new Color(val));
    }
    get intensity() {
        var _a;
        return (_a = this._intensity) !== null && _a !== void 0 ? _a : areaLightDefaults.intensity;
    }
    set intensity(val) {
        this._intensity = val;
        this.light && (this.light.intensity = val);
    }
    get width() {
        var _a;
        return (_a = this._width) !== null && _a !== void 0 ? _a : areaLightDefaults.width;
    }
    set width(val) {
        this._width = val;
        this.light && (this.light.width = val * this.scaleX * scaleDown);
    }
    get height() {
        var _a;
        return (_a = this._height) !== null && _a !== void 0 ? _a : areaLightDefaults.height;
    }
    set height(val) {
        this._height = val;
        this.light && (this.light.height = val * this.scaleY * scaleDown);
    }
    get scaleX() {
        var _a;
        return (_a = this._scaleX) !== null && _a !== void 0 ? _a : areaLightDefaults.scaleX;
    }
    set scaleX(val) {
        this._scaleX = val;
        this.light && (this.light.width = val * this.width * scaleDown);
    }
    get scaleY() {
        var _a;
        return (_a = this._scaleY) !== null && _a !== void 0 ? _a : areaLightDefaults.scaleY;
    }
    set scaleY(val) {
        this._scaleY = val;
        this.light && (this.light.height = val * this.height * scaleDown);
    }
    get depth() {
        return 0;
    }
    set depth(_) {
    }
    get scaleZ() {
        return 0;
    }
    set scaleZ(_) {
    }
    getCenter() {
        return this.getWorldPosition();
    }
}
default_1.componentName = "areaLight";
default_1.defaults = areaLightDefaults;
default_1.schema = areaLightSchema;
