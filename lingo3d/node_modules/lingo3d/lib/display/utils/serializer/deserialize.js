import { omit } from "@lincode/utils";
import createObject from "./createObject";
import { nonSerializedProperties } from "./types";
import applySetup from "./applySetup";
const nodeToObjectManager = (node, loadedResolvables) => {
    var _a;
    if (node.type === "setup") {
        applySetup(node);
        return;
    }
    if (node.type === "animation")
        return;
    const object = createObject(node.type);
    //@ts-ignore
    loadedResolvables && "loadedResolvable" in object && loadedResolvables.push(object.loadedResolvable);
    Object.assign(object, omit(node, nonSerializedProperties));
    (_a = node.children) === null || _a === void 0 ? void 0 : _a.map(n => nodeToObjectManager(n, loadedResolvables)).forEach(c => c && object.append(c));
    return object;
};
export default (graph, loadedResolvables) => (graph.map(n => nodeToObjectManager(n, loadedResolvables)));
