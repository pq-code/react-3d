import { PerspectiveCamera } from "three";
import EventLoopItem from "../../api/core/EventLoopItem";
import CameraMixin from "../core/mixins/CameraMixin";
import IOrbitCamera from "../../interface/IOrbitCamera";
import PositionedItem from "../../api/core/PositionedItem";
declare class OrbitCamera extends PositionedItem implements IOrbitCamera {
    protected camera: PerspectiveCamera;
    static componentName: string;
    static defaults: IOrbitCamera;
    static schema: Required<import("../../interface/utils/extractProps").ExtractProps<IOrbitCamera>>;
    private controls;
    private updateDebounced;
    constructor(camera?: PerspectiveCamera);
    private _targetX?;
    get targetX(): number;
    set targetX(val: number);
    private _targetY?;
    get targetY(): number;
    set targetY(val: number);
    private _targetZ?;
    get targetZ(): number;
    set targetZ(val: number);
    private targetState;
    append(object: PositionedItem): void;
    attach(object: PositionedItem): void;
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get rotationX(): number;
    get rotationY(): number;
    get rotationZ(): number;
    get enableDamping(): boolean;
    set enableDamping(val: boolean);
    get enablePan(): boolean;
    set enablePan(val: boolean);
    private enableZoomState;
    get enableZoom(): boolean;
    set enableZoom(val: boolean);
    private enableFlyState;
    get enableFly(): boolean;
    set enableFly(val: boolean);
    private enabledState;
    get enabled(): boolean;
    set enabled(val: boolean);
    get autoRotate(): boolean;
    set autoRotate(val: boolean);
    get autoRotateSpeed(): number;
    set autoRotateSpeed(val: number);
    private _minPolarAngle;
    get minPolarAngle(): number;
    set minPolarAngle(val: number);
    private _maxPolarAngle;
    get maxPolarAngle(): number;
    set maxPolarAngle(val: number);
    private _minAzimuthAngle;
    get minAzimuthAngle(): number;
    set minAzimuthAngle(val: number);
    private _maxAzimuthAngle;
    get maxAzimuthAngle(): number;
    set maxAzimuthAngle(val: number);
    get azimuthAngle(): number;
    set azimuthAngle(val: number);
    get polarAngle(): number;
    set polarAngle(val: number);
    get distance(): number;
    set distance(val: number);
    getCenter(): import("../..").Point3d;
}
interface OrbitCamera extends EventLoopItem, CameraMixin<PerspectiveCamera> {
}
export default OrbitCamera;
