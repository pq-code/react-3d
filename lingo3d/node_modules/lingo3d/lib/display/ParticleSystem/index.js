import { createParticle } from "./Particle";
import Cube from "../primitives/Cube";
import { random } from "@lincode/utils";
import { textureLoader } from "../utils/loaders/loadTexture";
import { vector3 } from "../utils/reusables";
import flareData from "./flareData";
const flareTexture = textureLoader.load(flareData);
const randomRange = (val, range) => random(val - range, val + range);
export default class ParticleSystem extends Cube {
    constructor() {
        super();
        this.speed = 0.0;
        this.speedRange = 0.5;
        this.accel = 0.0;
        this.accelRange = 0.0;
        this.lifeTime = 500;
        this.lifeTimeRange = 0;
        this.spread = 0;
        this.size = 20;
        this.sizeRange = 0;
        this.opacityRange = 0.0;
        this._frequency = 50;
        this.width = this.height = this.depth = 20;
        this.object3d.visible = false;
        this.start();
    }
    get frequency() {
        return this._frequency;
    }
    set frequency(val) {
        this._frequency = val;
        this.handle && this.start();
    }
    start() {
        var _a;
        (_a = this.handle) === null || _a === void 0 ? void 0 : _a.cancel();
        this.handle = this.timer(1000 / this._frequency, -1, () => {
            const [, , , , m0, m1, m2] = this.outerObject3d.matrixWorld.elements;
            const speed = randomRange(this.speed, this.speedRange);
            const [speedX, speedY, speedZ] = [speed * m0, speed * m1, speed * m2];
            const accel = randomRange(this.accel, this.accelRange);
            const [accelX, accelY, accelZ] = [accel * m0, accel * m1, accel * m2];
            const size = randomRange(this.size, this.sizeRange);
            const opacity = randomRange(this.opacity, this.opacityRange);
            this.outerObject3d.getWorldPosition(vector3);
            createParticle().init(flareTexture, this.bloom, size, this.sizeEnd, opacity, this.opacityEnd, this.color, this.colorEnd, vector3.x, vector3.y, vector3.z, accelX, accelY, accelZ, speedX + random(-this.spread, this.spread), speedY, speedZ + random(-this.spread, this.spread), randomRange(this.lifeTime, this.lifeTimeRange));
        });
    }
    stop() {
        var _a;
        (_a = this.handle) === null || _a === void 0 ? void 0 : _a.cancel();
        this.handle = undefined;
    }
}
ParticleSystem.componentName = "particleSystem";
