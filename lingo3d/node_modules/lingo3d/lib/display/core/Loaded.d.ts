import { Cancellable, Resolvable } from "@lincode/promiselikes";
import { Group, Mesh, Object3D } from "three";
import ObjectManager from "./ObjectManager";
import ILoaded from "../../interface/ILoaded";
import { PhysicsOptions } from "../../interface/IPhysics";
export default abstract class Loaded<T> extends ObjectManager<Mesh> implements ILoaded {
    protected loadedGroup: Group;
    constructor();
    protected loadedResolvable: Resolvable<Object3D<import("three").Event>>;
    protected abstract load(src: string): Promise<T>;
    protected abstract resolveLoaded(data: T): void;
    protected _src?: string;
    get src(): string | undefined;
    set src(src: string | undefined);
    private loadedHandle?;
    private _onLoad?;
    get onLoad(): (() => void) | undefined;
    set onLoad(cb: (() => void) | undefined);
    protected widthSet?: boolean;
    get width(): number;
    set width(val: number);
    protected heightSet?: boolean;
    get height(): number;
    set height(val: number);
    protected depthSet?: boolean;
    get depth(): number;
    set depth(val: number);
    get innerRotationX(): number;
    set innerRotationX(val: number);
    get innerRotationY(): number;
    set innerRotationY(val: number);
    get innerRotationZ(): number;
    set innerRotationZ(val: number);
    get innerX(): number;
    set innerX(val: number);
    get innerY(): number;
    set innerY(val: number);
    get innerZ(): number;
    set innerZ(val: number);
    get innerVisible(): boolean;
    set innerVisible(val: boolean);
    get frustumCulled(): boolean;
    set frustumCulled(val: boolean);
    get physics(): PhysicsOptions;
    set physics(val: PhysicsOptions);
    private _boxVisible?;
    get boxVisible(): boolean;
    set boxVisible(val: boolean);
    private _outline?;
    private _outlineHandle?;
    get outline(): boolean;
    set outline(val: boolean);
    private _bloom?;
    private _bloomHandle?;
    get bloom(): boolean;
    set bloom(val: boolean);
    private _reflection?;
    private _reflectionHandle?;
    get reflection(): boolean;
    set reflection(val: boolean);
    private managerSet?;
    protected addToRaycastSet(set: Set<Object3D>, handle: Cancellable): void;
}
