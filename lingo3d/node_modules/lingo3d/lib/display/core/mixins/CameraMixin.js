import { CameraHelper } from "three";
import mainCamera from "../../../engine/mainCamera";
import scene from "../../../engine/scene";
import { bokehDefault, setBokeh } from "../../../states/useBokeh";
import { bokehApertureDefault, setBokehAperture } from "../../../states/useBokehAperture";
import { bokehFocusDefault, setBokehFocus } from "../../../states/useBokehFocus";
import { bokehMaxBlurDefault, setBokehMaxBlur } from "../../../states/useBokehMaxBlur";
import { getCamera, setCamera } from "../../../states/useCamera";
import { pushCameraList, pullCameraList } from "../../../states/useCameraList";
import EventLoopItem from "../../../api/core/EventLoopItem";
import makeCameraSprite from "../utils/makeCameraSprite";
import { emitSelectionTarget, onSelectionTarget } from "../../../events/onSelectionTarget";
export default class CameraMixin extends EventLoopItem {
    initCamera() {
        pushCameraList(this.camera);
        this.then(() => {
            this.active && setCamera(mainCamera);
            pullCameraList(this.camera);
        });
        this.createEffect(() => {
            if (getCamera() !== mainCamera || getCamera() === this.camera)
                return;
            const helper = new CameraHelper(this.camera);
            scene.add(helper);
            const sprite = makeCameraSprite();
            helper.add(sprite.outerObject3d);
            const handle = onSelectionTarget(target => {
                target === sprite && emitSelectionTarget(this);
            });
            return () => {
                helper.dispose();
                scene.remove(helper);
                sprite.dispose();
                handle.cancel();
            };
        }, [getCamera]);
    }
    get fov() {
        return this.camera.fov;
    }
    set fov(val) {
        var _a, _b;
        this.camera.fov = val;
        (_b = (_a = this.camera).updateProjectionMatrix) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    get zoom() {
        return this.camera.zoom;
    }
    set zoom(val) {
        var _a, _b;
        this.camera.zoom = val;
        (_b = (_a = this.camera).updateProjectionMatrix) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    get near() {
        return this.camera.near;
    }
    set near(val) {
        var _a, _b;
        this.camera.near = val;
        (_b = (_a = this.camera).updateProjectionMatrix) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    get far() {
        return this.camera.far;
    }
    set far(val) {
        var _a, _b;
        this.camera.far = val;
        (_b = (_a = this.camera).updateProjectionMatrix) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    activate() {
        setCamera(this.camera);
    }
    get active() {
        return getCamera() === this.camera;
    }
    set active(val) {
        val && this.activate();
    }
    get bokeh() {
        var _a;
        return (_a = this.camera.userData.bokeh) !== null && _a !== void 0 ? _a : bokehDefault;
    }
    set bokeh(val) {
        getCamera() === this.camera && setBokeh(val);
        this.camera.userData.bokeh = val;
    }
    get bokehFocus() {
        var _a;
        return (_a = this.camera.userData.bokehFocus) !== null && _a !== void 0 ? _a : bokehFocusDefault;
    }
    set bokehFocus(val) {
        getCamera() === this.camera && setBokehFocus(val);
        this.camera.userData.bokehFocus = val;
    }
    get bokehMaxBlur() {
        var _a;
        return (_a = this.camera.userData.bokehMaxBlur) !== null && _a !== void 0 ? _a : bokehMaxBlurDefault;
    }
    set bokehMaxBlur(val) {
        getCamera() === this.camera && setBokehMaxBlur(val);
        this.camera.userData.bokehMaxBlur = val;
    }
    get bokehAperture() {
        var _a;
        return (_a = this.camera.userData.bokehAperture) !== null && _a !== void 0 ? _a : bokehApertureDefault;
    }
    set bokehAperture(val) {
        getCamera() === this.camera && setBokehAperture(val);
        this.camera.userData.bokehAperture = val;
    }
}
