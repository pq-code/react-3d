import { Color } from "three";
import mainCamera from "../../engine/mainCamera";
import scene from "../../engine/scene";
import { emitSelectionTarget, onSelectionTarget } from "../../events/onSelectionTarget";
import { getCamera } from "../../states/useCamera";
import ObjectManager from "./ObjectManager";
import makeLightSprite from "./utils/makeLightSprite";
export default class LightBase extends ObjectManager {
    constructor(light, Helper) {
        super(light);
        Helper && this.createEffect(() => {
            if (getCamera() !== mainCamera)
                return;
            const helper = new Helper(this.object3d);
            scene.add(helper);
            const sprite = makeLightSprite();
            helper.add(sprite.outerObject3d);
            const handle = onSelectionTarget(target => {
                target === sprite && emitSelectionTarget(this);
            });
            return () => {
                helper.dispose();
                scene.remove(helper);
                sprite.dispose();
                handle.cancel();
            };
        }, [getCamera]);
    }
    dispose() {
        super.dispose();
        this.object3d.dispose();
        return this;
    }
    lookAt(target) {
        super.lookAt(target);
        this.rotationY += 180;
    }
    get color() {
        return "#" + this.object3d.color.getHexString();
    }
    set color(val) {
        this.object3d.color = new Color(val);
    }
    get intensity() {
        return this.object3d.intensity;
    }
    set intensity(val) {
        this.object3d.intensity = val;
    }
    getCenter() {
        return this.getWorldPosition();
    }
}
