import { Object3D } from "three";
import { Cancellable } from "@lincode/promiselikes";
import Point3d from "../../../api/Point3d";
import ISimpleObjectManager, { OnIntersectValue } from "../../../interface/ISimpleObjectManager";
import PhysicsItem from "./PhysicsItem";
import { MouseInteractionPayload } from "../../../interface/IMouse";
import PositionedItem from "../../../api/core/PositionedItem";
export declare const idMap: Map<string, Set<SimpleObjectManager<Object3D<import("three").Event>>>>;
export default class SimpleObjectManager<T extends Object3D = Object3D> extends PhysicsItem implements ISimpleObjectManager {
    object3d: T;
    constructor(object3d: T);
    dispose(): this;
    protected addToRaycastSet(set: Set<Object3D>, handle: Cancellable): void;
    protected clickHandle: Cancellable | undefined;
    private _onClick?;
    get onClick(): ((e: MouseInteractionPayload) => void) | undefined;
    set onClick(cb: ((e: MouseInteractionPayload) => void) | undefined);
    protected mouseDownHandle: Cancellable | undefined;
    private _onMouseDown?;
    get onMouseDown(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseDown(cb: ((e: MouseInteractionPayload) => void) | undefined);
    protected mouseUpHandle: Cancellable | undefined;
    private _onMouseUp?;
    get onMouseUp(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseUp(cb: ((e: MouseInteractionPayload) => void) | undefined);
    protected mouseOverHandle: Cancellable | undefined;
    private _onMouseOver?;
    get onMouseOver(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseOver(cb: ((e: MouseInteractionPayload) => void) | undefined);
    protected mouseOutHandle: Cancellable | undefined;
    private _onMouseOut?;
    get onMouseOut(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseOut(cb: ((e: MouseInteractionPayload) => void) | undefined);
    protected mouseMoveHandle: Cancellable | undefined;
    private _onMouseMove?;
    get onMouseMove(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseMove(cb: ((e: MouseInteractionPayload) => void) | undefined);
    get name(): string;
    set name(val: string);
    private _id?;
    get id(): string | undefined;
    set id(val: string | undefined);
    protected getRay(): import("three").Ray;
    pointAt(distance: number): Point3d;
    rayIntersectsAt(target: SimpleObjectManager, maxDistance?: number): Point3d | undefined;
    rayIntersects(target: SimpleObjectManager): boolean;
    getRayIntersectionsAt(id: string, maxDistance?: number): [SimpleObjectManager<Object3D<import("three").Event>>, Point3d][];
    getRayIntersections(id: string, maxDistance?: number): SimpleObjectManager<Object3D<import("three").Event>>[];
    listenToRayIntersection(id: string, cb: (target: SimpleObjectManager, pt: Point3d) => void, maxDistance?: number): Cancellable;
    intersects(target: SimpleObjectManager): boolean;
    getIntersections(id: string): SimpleObjectManager<Object3D<import("three").Event>>[];
    listenToIntersection(id: string, cb?: OnIntersectValue, cbOut?: OnIntersectValue): Cancellable;
    private onIntersectState?;
    private onIntersectOutState?;
    private intersectIdsState?;
    private initIntersect;
    get onIntersect(): OnIntersectValue | undefined;
    set onIntersect(val: OnIntersectValue | undefined);
    get onIntersectOut(): OnIntersectValue | undefined;
    set onIntersectOut(val: OnIntersectValue | undefined);
    get intersectIds(): Array<string> | undefined;
    set intersectIds(val: Array<string> | undefined);
    get clientX(): number;
    get clientY(): number;
    get width(): number;
    set width(val: number);
    get height(): number;
    set height(val: number);
    get depth(): number;
    set depth(val: number);
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get scaleX(): number;
    set scaleX(val: number);
    get scaleY(): number;
    set scaleY(val: number);
    get scaleZ(): number;
    set scaleZ(val: number);
    get scale(): number;
    set scale(val: number);
    get rotationX(): number;
    set rotationX(val: number);
    protected onRotationY?: () => void;
    get rotationY(): number;
    set rotationY(val: number);
    get rotationZ(): number;
    set rotationZ(val: number);
    get rotation(): number;
    set rotation(val: number);
    get reflection(): boolean;
    set reflection(val: boolean);
    get bloom(): boolean;
    set bloom(val: boolean);
    get outline(): boolean;
    set outline(val: boolean);
    private _visible?;
    get visible(): boolean;
    set visible(val: boolean);
    get innerVisible(): boolean;
    set innerVisible(val: boolean);
    get frustumCulled(): boolean;
    set frustumCulled(val: boolean);
    protected _metalnessFactor?: number;
    get metalnessFactor(): number;
    set metalnessFactor(val: number);
    protected _roughnessFactor?: number;
    get roughnessFactor(): number;
    set roughnessFactor(val: number);
    protected _environmentFactor?: number;
    get environmentFactor(): number;
    set environmentFactor(val: number);
    protected _toon?: boolean;
    get toon(): boolean;
    set toon(val: boolean);
    protected _pbr?: boolean;
    get pbr(): boolean;
    set pbr(val: boolean);
    lookAt(target: PositionedItem | Point3d): void;
    translateX(val: number): void;
    translateY(val: number): void;
    translateZ(val: number): void;
    placeAt(object: PositionedItem | {
        x: number;
        y: number;
        z: number;
    }): void;
    moveForward(distance: number): void;
    moveRight(distance: number): void;
    get frustumVisible(): boolean;
}
