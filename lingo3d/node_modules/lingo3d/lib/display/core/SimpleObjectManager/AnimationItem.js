import AnimationManager from "./AnimationManager";
import { debounce } from "@lincode/utils";
import PositionedItem from "../../../api/core/PositionedItem";
const buildAnimationTracks = debounce((val) => {
    const entries = Object.entries(val);
    let maxLength = 0;
    for (const [, { length }] of entries)
        length > maxLength && (maxLength = length);
    const duration = 1000;
    const timeStep = duration * 0.001 / maxLength;
    const result = {};
    for (const [name, values] of entries)
        result[name] = Object.fromEntries(values.map((v, i) => [(i * timeStep).toFixed(2), v]));
    return result;
}, 0, "trailingPromise");
export default class AnimationItem extends PositionedItem {
    get animations() {
        var _a;
        return (_a = this.animationManagers) !== null && _a !== void 0 ? _a : (this.animationManagers = {});
    }
    set animations(val) {
        this.animationManagers = val;
    }
    createAnimation(name) {
        if (name in this.animations) {
            const animation = this.animations[name];
            if (typeof animation !== "string")
                return animation;
        }
        const animation = this.watch(new AnimationManager(name, this));
        this.animations[name] = animation;
        return animation;
    }
    buildAnimation(val) {
        buildAnimationTracks(val).then(tracks => {
            const name = "lingo3d-animation";
            this.createAnimation(name).setTracks(tracks);
            this.playAnimation(name);
        });
    }
    makeAnimationProxy(source) {
        return new Proxy(source, {
            get: (anim, prop) => {
                return anim[prop];
            },
            set: (anim, prop, value) => {
                anim[prop] = value;
                this.buildAnimation(anim);
                return true;
            }
        });
    }
    async playAnimation(name, o) {
        var _a;
        await Promise.resolve();
        if (this.loadingAnims) {
            await Promise.all(this.loadingAnims);
            this.loadingAnims = undefined;
        }
        if (this.done)
            return;
        this.animationManager = typeof name === "string"
            ? this.animations[name]
            : Object.values(this.animations)[name !== null && name !== void 0 ? name : 0];
        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.play(o);
    }
    stopAnimation() {
        var _a;
        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.stop();
    }
    get animationPaused() {
        var _a;
        return !!((_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.getPaused());
    }
    set animationPaused(value) {
        (async () => {
            var _a;
            await Promise.resolve();
            if (this.loadingAnims)
                await Promise.all(this.loadingAnims);
            if (this.done)
                return;
            (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.setPaused(value);
        })();
    }
    setAnimation(val, o) {
        if (typeof val === "string" || typeof val === "number") {
            this.animationName = val;
            this.playAnimation(val, o);
            this._animation = undefined;
            return;
        }
        if (typeof val === "boolean") {
            val ? this.playAnimation(undefined, o) : this.stopAnimation();
            this._animation = undefined;
            return;
        }
        this._animation = val;
        if (!val) {
            this.stopAnimation();
            return;
        }
        this._animation = this.makeAnimationProxy(val);
        this.buildAnimation(val);
    }
    get animation() {
        return this._animation;
    }
    set animation(val) {
        if (Array.isArray(val)) {
            let currentIndex = 0;
            const o = {
                onFinish: () => {
                    if (++currentIndex >= val.length)
                        currentIndex = 0;
                    this.setAnimation(val[currentIndex], o);
                },
                repeat: false
            };
            this.setAnimation(val[0], o);
            return;
        }
        this.queueMicrotask(() => this.setAnimation(val));
    }
}
