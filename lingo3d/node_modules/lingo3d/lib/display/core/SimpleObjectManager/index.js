import { rad2Deg, deg2Rad, distance3d } from "@lincode/math";
import { Matrix3, PropertyBinding, Vector3 } from "three";
import { clickSet, mouseDownSet, mouseOutSet, mouseMoveSet, mouseOverSet, mouseUpSet } from "./raycast";
import { frustum, matrix4, quaternion, ray, vector3, vector3_, vector3_1, vector3_half } from "../../utils/reusables";
import { forceGet, throttle } from "@lincode/utils";
import { OBB } from "three/examples/jsm/math/OBB";
import { scaleDown, scaleUp } from "../../../engine/constants";
import { addBloom, deleteBloom } from "../../../engine/renderLoop/effectComposer/selectiveBloomPass/renderSelectiveBloom";
import worldToClient from "../../utils/worldToClient";
import { Cancellable } from "@lincode/promiselikes";
import { point2Vec, vec2Point } from "../../utils/vec2Point";
import PhysicsItem from "./PhysicsItem";
import { cannonContactBodies, cannonContactMap } from "./PhysicsItem/cannon/cannonLoop";
import { addSSR, deleteSSR } from "../../../engine/renderLoop/effectComposer/ssrPass";
import { getCamera } from "../../../states/useCamera";
import bvhContactMap from "./PhysicsItem/bvh/bvhContactMap";
import { addOutline, deleteOutline } from "../../../engine/renderLoop/effectComposer/outlinePass";
import getCenter from "../../utils/getCenter";
import applyMaterialProperties, { applySet } from "./applyMaterialProperties";
import { Reactive } from "@lincode/reactivity";
export const idMap = new Map();
const thisOBB = new OBB();
const targetOBB = new OBB();
const makeSet = () => new Set();
const ptDistCache = new WeakMap();
const distance3dCached = (pt, vecSelf) => {
    const cached = ptDistCache.get(pt);
    if (cached)
        return cached;
    const result = distance3d(pt.x, pt.y, pt.z, vecSelf.x * scaleUp, vecSelf.y * scaleUp, vecSelf.z * scaleUp);
    ptDistCache.set(pt, result);
    return result;
};
const updateFrustum = throttle(() => {
    const camera = getCamera();
    frustum.setFromProjectionMatrix(matrix4.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));
}, 200, "leading");
export default class SimpleObjectManager extends PhysicsItem {
    constructor(object3d) {
        super(object3d);
        this.object3d = object3d;
    }
    dispose() {
        super.dispose();
        this._id !== undefined && idMap.get(this._id).delete(this);
        deleteSSR(this.object3d);
        return this;
    }
    addToRaycastSet(set, handle) {
        set.add(this.object3d);
        handle.then(() => set.delete(this.object3d));
    }
    get onClick() {
        return this._onClick;
    }
    set onClick(cb) {
        var _a;
        (_a = this.clickHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        this._onClick = cb;
        if (!cb)
            return;
        this.addToRaycastSet(clickSet, this.clickHandle = new Cancellable());
    }
    get onMouseDown() {
        return this._onMouseDown;
    }
    set onMouseDown(cb) {
        var _a;
        (_a = this.mouseDownHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        this._onMouseDown = cb;
        if (!cb)
            return;
        this.addToRaycastSet(mouseDownSet, this.mouseDownHandle = new Cancellable());
    }
    get onMouseUp() {
        return this._onMouseUp;
    }
    set onMouseUp(cb) {
        var _a;
        (_a = this.mouseUpHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        this._onMouseUp = cb;
        if (!cb)
            return;
        this.addToRaycastSet(mouseUpSet, this.mouseUpHandle = new Cancellable());
    }
    get onMouseOver() {
        return this._onMouseOver;
    }
    set onMouseOver(cb) {
        var _a;
        (_a = this.mouseOverHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        this._onMouseOver = cb;
        if (!cb)
            return;
        this.addToRaycastSet(mouseOverSet, this.mouseOverHandle = new Cancellable());
    }
    get onMouseOut() {
        return this._onMouseOut;
    }
    set onMouseOut(cb) {
        var _a;
        (_a = this.mouseOutHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        this._onMouseOut = cb;
        if (!cb)
            return;
        this.addToRaycastSet(mouseOutSet, this.mouseOutHandle = new Cancellable());
    }
    get onMouseMove() {
        return this._onMouseMove;
    }
    set onMouseMove(cb) {
        var _a;
        (_a = this.mouseMoveHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        this._onMouseMove = cb;
        if (!cb)
            return;
        this.addToRaycastSet(mouseMoveSet, this.mouseMoveHandle = new Cancellable());
    }
    get name() {
        return this.outerObject3d.name;
    }
    set name(val) {
        this.outerObject3d.name = PropertyBinding.sanitizeNodeName(val);
    }
    get id() {
        return this._id;
    }
    set id(val) {
        this._id !== undefined && idMap.get(this._id).delete(this);
        this._id = val;
        val !== undefined && forceGet(idMap, val, makeSet).add(this);
    }
    getRay() {
        return ray.set(this.object3d.getWorldPosition(vector3_), this.object3d.getWorldDirection(vector3));
    }
    pointAt(distance) {
        return vec2Point(this.getRay().at(distance * scaleDown, vector3));
    }
    rayIntersectsAt(target, maxDistance) {
        if (this.done)
            return undefined;
        if (target.done)
            return undefined;
        if (this === target)
            return undefined;
        targetOBB.set(target.object3d.getWorldPosition(new Vector3()), vector3_half, new Matrix3().setFromMatrix4(target.object3d.matrixWorld));
        const vec = targetOBB.intersectRay(this.getRay(), vector3);
        if (!vec)
            return;
        if (maxDistance) {
            const { x, y, z } = this.object3d.getWorldPosition(vector3_);
            if (distance3d(vec.x, vec.y, vec.z, x, y, z) * scaleUp > maxDistance)
                return;
        }
        return vec2Point(vec);
    }
    rayIntersects(target) {
        return !!this.rayIntersectsAt(target);
    }
    getRayIntersectionsAt(id, maxDistance) {
        var _a;
        const result = [];
        for (const target of (_a = idMap.get(id)) !== null && _a !== void 0 ? _a : []) {
            if (target === this)
                continue;
            const pt = this.rayIntersectsAt(target, maxDistance);
            pt && result.push([target, pt]);
        }
        this.object3d.getWorldPosition(vector3_);
        return result.sort((a, b) => {
            return distance3dCached(a[1], vector3_) - distance3dCached(b[1], vector3_);
        });
    }
    getRayIntersections(id, maxDistance) {
        return this.getRayIntersectionsAt(id, maxDistance).map(result => result[0]);
    }
    listenToRayIntersection(id, cb, maxDistance) {
        return this.loop(() => {
            for (const [target, pt] of this.getRayIntersectionsAt(id, maxDistance))
                cb(target, pt);
        });
    }
    intersects(target) {
        var _a, _b, _c, _d;
        if (this.done)
            return false;
        if (target.done)
            return false;
        if (this === target)
            return false;
        if ((this.bvhMap && target.bvhCharacter) || (this.bvhCharacter && target.bvhMap))
            return (((_a = bvhContactMap.get(this)) === null || _a === void 0 ? void 0 : _a.has(target)) ||
                ((_b = bvhContactMap.get(target)) === null || _b === void 0 ? void 0 : _b.has(this)) || false);
        if (this.cannonBody && target.cannonBody) {
            cannonContactBodies.add(this.cannonBody);
            cannonContactBodies.add(target.cannonBody);
            return (((_c = cannonContactMap.get(this.cannonBody)) === null || _c === void 0 ? void 0 : _c.has(target.cannonBody)) ||
                ((_d = cannonContactMap.get(target.cannonBody)) === null || _d === void 0 ? void 0 : _d.has(this.cannonBody)) || false);
        }
        thisOBB.set(this.object3d.getWorldPosition(new Vector3()), vector3_1.clone(), new Matrix3());
        thisOBB.applyMatrix4(this.object3d.matrixWorld);
        targetOBB.set(target.object3d.getWorldPosition(new Vector3()), vector3_1.clone(), new Matrix3());
        targetOBB.applyMatrix4(target.object3d.matrixWorld);
        return thisOBB.intersectsOBB(targetOBB, 0);
    }
    getIntersections(id) {
        var _a;
        const result = [];
        for (const target of (_a = idMap.get(id)) !== null && _a !== void 0 ? _a : []) {
            if (target === this)
                continue;
            this.intersects(target) && result.push(target);
        }
        return result;
    }
    listenToIntersection(id, cb, cbOut) {
        let intersectionsOld = [];
        return this.loop(() => {
            const intersections = this.getIntersections(id);
            if (cb)
                for (const target of intersections)
                    if (!intersectionsOld.includes(target))
                        cb(target);
            if (cbOut)
                for (const target of intersectionsOld)
                    if (!intersections.includes(target))
                        cbOut(target);
            intersectionsOld = intersections;
        });
    }
    initIntersect() {
        if (this.onIntersectState)
            return;
        this.onIntersectState = new Reactive(undefined);
        this.onIntersectOutState = new Reactive(undefined);
        this.intersectIdsState = new Reactive(undefined);
        this.createEffect(() => {
            const { onIntersect, onIntersectOut, intersectIds } = this;
            if (!intersectIds || (!onIntersect && !onIntersectOut))
                return;
            const handles = [];
            for (const id of intersectIds)
                handles.push(this.listenToIntersection(id, onIntersect, onIntersectOut));
            return () => {
                for (const handle of handles)
                    handle.cancel();
            };
        }, [this.onIntersectState.get, this.onIntersectOutState.get, this.intersectIdsState.get]);
    }
    get onIntersect() {
        var _a;
        return (_a = this.onIntersectState) === null || _a === void 0 ? void 0 : _a.get();
    }
    set onIntersect(val) {
        var _a;
        this.initIntersect();
        (_a = this.onIntersectState) === null || _a === void 0 ? void 0 : _a.set(val);
    }
    get onIntersectOut() {
        var _a;
        return (_a = this.onIntersectOutState) === null || _a === void 0 ? void 0 : _a.get();
    }
    set onIntersectOut(val) {
        var _a;
        this.initIntersect();
        (_a = this.onIntersectOutState) === null || _a === void 0 ? void 0 : _a.set(val);
    }
    get intersectIds() {
        var _a;
        return (_a = this.intersectIdsState) === null || _a === void 0 ? void 0 : _a.get();
    }
    set intersectIds(val) {
        var _a;
        this.initIntersect();
        (_a = this.intersectIdsState) === null || _a === void 0 ? void 0 : _a.set(val);
    }
    get clientX() {
        return worldToClient(this.object3d).x;
    }
    get clientY() {
        return worldToClient(this.object3d).y;
    }
    get width() {
        return this.object3d.scale.x * scaleUp;
    }
    set width(val) {
        this.object3d.scale.x = val * scaleDown;
    }
    get height() {
        return this.object3d.scale.y * scaleUp;
    }
    set height(val) {
        this.object3d.scale.y = val * scaleDown;
    }
    get depth() {
        return this.object3d.scale.z * scaleUp;
    }
    set depth(val) {
        this.object3d.scale.z = val * scaleDown;
    }
    get x() {
        return super.x;
    }
    set x(val) {
        var _a;
        var _b;
        super.x = val;
        this.physicsUpdate && (((_a = (_b = this.physicsUpdate).position) !== null && _a !== void 0 ? _a : (_b.position = {})).x = true);
    }
    get y() {
        return super.y;
    }
    set y(val) {
        var _a;
        var _b;
        super.y = val;
        this.physicsUpdate && (((_a = (_b = this.physicsUpdate).position) !== null && _a !== void 0 ? _a : (_b.position = {})).y = true);
    }
    get z() {
        return super.z;
    }
    set z(val) {
        var _a;
        var _b;
        super.z = val;
        this.physicsUpdate && (((_a = (_b = this.physicsUpdate).position) !== null && _a !== void 0 ? _a : (_b.position = {})).z = true);
    }
    get scaleX() {
        return this.outerObject3d.scale.x;
    }
    set scaleX(val) {
        this.outerObject3d.scale.x = val;
    }
    get scaleY() {
        return this.outerObject3d.scale.y;
    }
    set scaleY(val) {
        this.outerObject3d.scale.y = val;
    }
    get scaleZ() {
        return this.outerObject3d.scale.z;
    }
    set scaleZ(val) {
        this.outerObject3d.scale.z = val;
    }
    get scale() {
        return this.scaleX;
    }
    set scale(val) {
        this.scaleX = val;
        this.scaleY = val;
        this.scaleZ = val;
    }
    get rotationX() {
        return this.outerObject3d.rotation.x * rad2Deg;
    }
    set rotationX(val) {
        var _a;
        var _b;
        this.outerObject3d.rotation.x = val * deg2Rad;
        this.physicsUpdate && (((_a = (_b = this.physicsUpdate).rotation) !== null && _a !== void 0 ? _a : (_b.rotation = {})).x = true);
    }
    get rotationY() {
        return this.outerObject3d.rotation.y * rad2Deg;
    }
    set rotationY(val) {
        var _a, _b;
        var _c;
        this.outerObject3d.rotation.y = val * deg2Rad;
        this.physicsUpdate && (((_a = (_c = this.physicsUpdate).rotation) !== null && _a !== void 0 ? _a : (_c.rotation = {})).y = true);
        (_b = this.onRotationY) === null || _b === void 0 ? void 0 : _b.call(this);
    }
    get rotationZ() {
        return this.outerObject3d.rotation.z * rad2Deg;
    }
    set rotationZ(val) {
        var _a;
        var _b;
        this.outerObject3d.rotation.z = val * deg2Rad;
        this.physicsUpdate && (((_a = (_b = this.physicsUpdate).rotation) !== null && _a !== void 0 ? _a : (_b.rotation = {})).z = true);
    }
    get rotation() {
        return this.rotationZ;
    }
    set rotation(val) {
        this.rotationZ = val;
    }
    get reflection() {
        return !!this.object3d.userData.ssr;
    }
    set reflection(val) {
        val ? addSSR(this.object3d) : deleteSSR(this.object3d);
    }
    get bloom() {
        return !!this.outerObject3d.userData.bloom;
    }
    set bloom(val) {
        val ? addBloom(this.outerObject3d) : deleteBloom(this.outerObject3d);
    }
    get outline() {
        return !!this.object3d.userData.outline;
    }
    set outline(val) {
        val ? addOutline(this.object3d) : deleteOutline(this.object3d);
    }
    get visible() {
        return this._visible !== false;
    }
    set visible(val) {
        this._visible = val;
        this.outerObject3d.visible = val;
    }
    get innerVisible() {
        return this.object3d.visible;
    }
    set innerVisible(val) {
        this.object3d.visible = val;
    }
    get frustumCulled() {
        return this.outerObject3d.frustumCulled;
    }
    set frustumCulled(val) {
        this.outerObject3d.traverse(child => child.frustumCulled = val);
    }
    get metalnessFactor() {
        var _a;
        return (_a = this._metalnessFactor) !== null && _a !== void 0 ? _a : 0;
    }
    set metalnessFactor(val) {
        this._metalnessFactor = val;
        applySet.add(this);
        applyMaterialProperties();
    }
    get roughnessFactor() {
        var _a;
        return (_a = this._roughnessFactor) !== null && _a !== void 0 ? _a : 1;
    }
    set roughnessFactor(val) {
        this._roughnessFactor = val;
        applySet.add(this);
        applyMaterialProperties();
    }
    get environmentFactor() {
        var _a;
        return (_a = this._environmentFactor) !== null && _a !== void 0 ? _a : 1;
    }
    set environmentFactor(val) {
        this._environmentFactor = val;
        applySet.add(this);
        applyMaterialProperties();
    }
    get toon() {
        var _a;
        return (_a = this._toon) !== null && _a !== void 0 ? _a : false;
    }
    set toon(val) {
        this._toon = val;
        applySet.add(this);
        applyMaterialProperties();
    }
    get pbr() {
        var _a;
        return (_a = this._pbr) !== null && _a !== void 0 ? _a : false;
    }
    set pbr(val) {
        this._pbr = val;
        applySet.add(this);
        applyMaterialProperties();
    }
    lookAt(target) {
        var _a, _b;
        if ("object3d" in target)
            this.outerObject3d.lookAt(((_a = target.object3d) !== null && _a !== void 0 ? _a : target.outerObject3d).getWorldPosition(vector3));
        else
            this.outerObject3d.lookAt(point2Vec(target));
        this.physicsRotate();
        (_b = this.onRotationY) === null || _b === void 0 ? void 0 : _b.call(this);
    }
    translateX(val) {
        this.outerObject3d.translateX(val * scaleDown);
        this.physicsMove();
    }
    translateY(val) {
        this.outerObject3d.translateY(val * scaleDown);
        this.physicsMove();
    }
    translateZ(val) {
        this.outerObject3d.translateZ(val * scaleDown);
        this.physicsMove();
    }
    placeAt(object) {
        var _a, _b;
        if ("object3d" in object) {
            this.outerObject3d.position.copy(getCenter((_a = object.object3d) !== null && _a !== void 0 ? _a : object.outerObject3d));
            this.outerObject3d.quaternion.copy(object.outerObject3d.getWorldQuaternion(quaternion));
        }
        else
            this.outerObject3d.position.copy(point2Vec(object));
        this.physicsMove();
        this.physicsRotate();
        (_b = this.onRotationY) === null || _b === void 0 ? void 0 : _b.call(this);
    }
    moveForward(distance) {
        if (distance === 0)
            return;
        vector3.setFromMatrixColumn(this.outerObject3d.matrix, 0);
        vector3.crossVectors(this.outerObject3d.up, vector3);
        this.outerObject3d.position.addScaledVector(vector3, distance * scaleDown);
        this.physicsMoveXZ();
    }
    moveRight(distance) {
        if (distance === 0)
            return;
        vector3.setFromMatrixColumn(this.outerObject3d.matrix, 0);
        this.outerObject3d.position.addScaledVector(vector3, distance * scaleDown);
        this.physicsMoveXZ();
    }
    get frustumVisible() {
        updateFrustum();
        return frustum.containsPoint(getCenter(this.object3d));
    }
}
