import AnimationItem from "../AnimationItem";
import cubeShape from "./cannon/shapes/cubeShape";
import { Point3d } from "@lincode/math";
import { assertExhaustive } from "@lincode/utils";
export default class PhysicsItem extends AnimationItem {
    constructor() {
        super(...arguments);
        this._physicsShape = cubeShape;
    }
    getMAV() {
        var _a;
        return (_a = this._mAV) !== null && _a !== void 0 ? _a : (this._mAV = new Point3d(Infinity, Infinity, Infinity));
    }
    get maxAngularVelocityX() {
        var _a, _b;
        return (_b = (_a = this._mAV) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : Infinity;
    }
    set maxAngularVelocityX(val) {
        this.getMAV().x = val;
    }
    get maxAngularVelocityY() {
        var _a, _b;
        return (_b = (_a = this._mAV) === null || _a === void 0 ? void 0 : _a.y) !== null && _b !== void 0 ? _b : Infinity;
    }
    set maxAngularVelocityY(val) {
        this.getMAV().y = val;
    }
    get maxAngularVelocityZ() {
        var _a, _b;
        return (_b = (_a = this._mAV) === null || _a === void 0 ? void 0 : _a.z) !== null && _b !== void 0 ? _b : Infinity;
    }
    set maxAngularVelocityZ(val) {
        this.getMAV().z = val;
    }
    getMV() {
        var _a;
        return (_a = this._mV) !== null && _a !== void 0 ? _a : (this._mV = new Point3d(Infinity, Infinity, Infinity));
    }
    get maxVelocityX() {
        var _a, _b;
        return (_b = (_a = this._mV) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : Infinity;
    }
    set maxVelocityX(val) {
        this.getMV().x = val;
    }
    get maxVelocityY() {
        var _a, _b;
        return (_b = (_a = this._mV) === null || _a === void 0 ? void 0 : _a.y) !== null && _b !== void 0 ? _b : Infinity;
    }
    set maxVelocityY(val) {
        this.getMV().y = val;
    }
    get maxVelocityZ() {
        var _a, _b;
        return (_b = (_a = this._mV) === null || _a === void 0 ? void 0 : _a.z) !== null && _b !== void 0 ? _b : Infinity;
    }
    set maxVelocityZ(val) {
        this.getMV().z = val;
    }
    physicsRotate() {
        var _a;
        var _b;
        if (!this.physicsUpdate)
            return;
        const rotation = (_a = (_b = this.physicsUpdate).rotation) !== null && _a !== void 0 ? _a : (_b.rotation = {});
        rotation.x = true;
        rotation.y = true;
        rotation.z = true;
    }
    physicsMove() {
        var _a;
        var _b;
        if (!this.physicsUpdate)
            return;
        const position = (_a = (_b = this.physicsUpdate).position) !== null && _a !== void 0 ? _a : (_b.position = {});
        position.x = true;
        position.y = true;
        position.z = true;
    }
    physicsMoveXZ() {
        var _a;
        var _b;
        if (!this.physicsUpdate)
            return;
        const position = (_a = (_b = this.physicsUpdate).position) !== null && _a !== void 0 ? _a : (_b.position = {});
        position.x = true;
        position.z = true;
    }
    applyForce(x, y, z) {
        setTimeout(() => { var _a; return (_a = this.cannonBody) === null || _a === void 0 ? void 0 : _a.applyForce({ x, y, z }); });
    }
    applyImpulse(x, y, z) {
        setTimeout(() => { var _a; return (_a = this.cannonBody) === null || _a === void 0 ? void 0 : _a.applyImpulse({ x, y, z }); });
    }
    applyLocalForce(x, y, z) {
        setTimeout(() => { var _a; return (_a = this.cannonBody) === null || _a === void 0 ? void 0 : _a.applyLocalForce({ x, y, z }); });
    }
    applyLocalImpulse(x, y, z) {
        setTimeout(() => { var _a; return (_a = this.cannonBody) === null || _a === void 0 ? void 0 : _a.applyLocalImpulse({ x, y, z }); });
    }
    applyTorque(x, y, z) {
        setTimeout(() => { var _a; return (_a = this.cannonBody) === null || _a === void 0 ? void 0 : _a.applyTorque({ x, y, z }); });
    }
    get velocity() {
        if (this.bvhVelocity)
            return this.bvhVelocity;
        if (this.cannonBody)
            return this.cannonBody.velocity;
        return new Point3d(0, 0, 0);
    }
    set velocity(val) {
        if (this.bvhVelocity)
            Object.assign(this.bvhVelocity, val);
        else if (this.cannonBody)
            Object.assign(this.cannonBody.velocity, val);
    }
    refreshCannon() {
        var _a;
        this.physicsUpdate && (this.physics = (_a = this._physics) !== null && _a !== void 0 ? _a : false);
    }
    get noTumble() {
        return this._noTumble;
    }
    set noTumble(val) {
        this._noTumble = val;
        this.refreshCannon();
    }
    get slippery() {
        return this._slippery;
    }
    set slippery(val) {
        this._slippery = val;
        this.refreshCannon();
    }
    get mass() {
        return this._mass;
    }
    set mass(val) {
        this._mass = val;
        this.refreshCannon();
    }
    get physicsGroup() {
        return this._physicsGroup;
    }
    set physicsGroup(val) {
        this._physicsGroup = val;
        this.refreshCannon();
    }
    get ignorePhysicsGroups() {
        return this._ignorePhysicsGroups;
    }
    set ignorePhysicsGroups(val) {
        this._ignorePhysicsGroups = val;
        this.refreshCannon();
    }
    get physicsShape() {
        return this._physicsShape;
    }
    set physicsShape(val) {
        this._physicsShape = val;
        this.refreshCannon();
    }
    initPhysics(val, handle) {
        if (!val || handle.done)
            return;
        switch (val) {
            case true:
            case "2d":
                import("./enableCannon").then(module => module.default.call(this, handle));
                break;
            case "map":
                this.bvhMap = true;
                import("./enableBVHMap").then(module => module.default.call(this, handle, false));
                break;
            case "map-debug":
                this.bvhMap = true;
                import("./enableBVHMap").then(module => module.default.call(this, handle, true));
                break;
            case "character":
                this.bvhCharacter = true;
                import("./enableBVHCharacter").then(module => module.default.call(this, handle));
                break;
            default:
                assertExhaustive(val);
        }
    }
    get physics() {
        var _a;
        return (_a = this._physics) !== null && _a !== void 0 ? _a : false;
    }
    set physics(val) {
        var _a;
        if (this._physics === val)
            return;
        this._physics = val;
        (_a = this.physicsHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        const handle = this.physicsHandle = this.cancellable();
        this.initPhysics(val, handle);
    }
}
