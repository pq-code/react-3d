import { getEditorActive } from "../../../../states/useEditorActive";
import { vector3, vector3_, quaternion } from "../../../utils/reusables";
import { bvhCameraSet, onBeforeCameraLoop } from "./bvh/bvhCameraLoop";
function setVisible(visible) {
    var _a;
    const target = this.targetState.get();
    //@ts-ignore
    if (target && target._visible === undefined)
        target.outerObject3d.visible = visible;
    for (const child of this.camera.children)
        if (((_a = child.userData.manager) === null || _a === void 0 ? void 0 : _a._visible) === undefined)
            child.visible = visible;
}
export default function () {
    if (this.done)
        return;
    const cam = this.camera;
    bvhCameraSet.add(cam);
    this.then(() => bvhCameraSet.delete(cam));
    let tooCloseOld = false;
    this.watch(onBeforeCameraLoop(() => {
        const origin = this.outerObject3d.getWorldPosition(vector3);
        const camPos = this.object3d.getWorldPosition(vector3_);
        const dist = camPos.distanceTo(origin);
        cam.position.lerp(camPos, 0.1);
        const ratio = cam.position.distanceTo(origin) / dist;
        cam.position.lerpVectors(origin, camPos, ratio);
        cam.quaternion.copy(this.object3d.getWorldQuaternion(quaternion));
        const tooClose = getEditorActive() ? false : ratio < 0.35;
        tooClose !== tooCloseOld && setVisible.call(this, !tooClose);
        tooCloseOld = tooClose;
    }));
}
