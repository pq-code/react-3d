import { applyMixins } from "@lincode/utils";
import { MeshStandardMaterial } from "three";
import SimpleObjectManager from "./SimpleObjectManager";
import { foundDefaults, foundSchema } from "../../interface/IFound";
import TexturedBasicMixin from "./mixins/TexturedBasicMixin";
import TexturedStandardMixin from "./mixins/TexturedStandardMixin";
import { appendableRoot } from "../../api/core/Appendable";
class FoundManager extends SimpleObjectManager {
    constructor(mesh) {
        var _a;
        // mesh.castShadow = true
        // mesh.receiveShadow = true
        super(mesh);
        //@ts-ignore
        this.material = (_a = mesh.material) !== null && _a !== void 0 ? _a : (mesh.material = new MeshStandardMaterial());
        appendableRoot.delete(this);
    }
    retargetAnimations() {
        var _a;
        if (!((_a = this.model) === null || _a === void 0 ? void 0 : _a.animationManagers))
            return;
        for (const animationManager of Object.values(this.model.animationManagers))
            this.animations[animationManager.name] = this.watch(animationManager.retarget(this.object3d));
        this.model = undefined;
    }
    get animation() {
        return super.animation;
    }
    set animation(val) {
        this.retargetAnimations();
        super.animation = val;
    }
    dispose() {
        super.dispose();
        this.material.dispose();
        return this;
    }
    addToRaycastSet(set, handle) {
        if (!this.managerSet) {
            this.managerSet = true;
            this.object3d.traverse(child => child.userData.manager = this);
        }
        set.add(this.object3d);
        handle.then(() => set.delete(this.object3d));
    }
}
FoundManager.componentName = "found";
FoundManager.defaults = foundDefaults;
FoundManager.schema = foundSchema;
applyMixins(FoundManager, [TexturedBasicMixin, TexturedStandardMixin]);
export default FoundManager;
