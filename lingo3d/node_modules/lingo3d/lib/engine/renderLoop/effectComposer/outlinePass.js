import { createEffect } from "@lincode/reactivity";
import { pull } from "@lincode/utils";
import { Color, Vector2 } from "three";
import { OutlinePass } from "three/examples/jsm/postprocessing/OutlinePass";
import loadTexture from "../../../display/utils/loaders/loadTexture";
import { getCamera } from "../../../states/useCamera";
import { getOutlineColor } from "../../../states/useOutlineColor";
import { getOutlineHiddenColor } from "../../../states/useOutlineHiddenColor";
import { getOutlinePattern } from "../../../states/useOutlinePattern";
import { getOutlinePulse } from "../../../states/useOutlinePulse";
import { getOutlineStrength } from "../../../states/useOutlineStrength";
import { getOutlineThickness } from "../../../states/useOutlineThickness";
import scene from "../../scene";
export const outlinePtr = [false];
const outlineSelects = [];
export const addOutline = (target) => {
    if (target.userData.outline)
        return;
    target.userData.outline = true;
    outlineSelects.push(target);
    outlinePtr[0] = true;
};
export const deleteOutline = (target) => {
    if (!target.userData.outline)
        return;
    target.userData.outline = false;
    pull(outlineSelects, target);
};
const outlinePass = new OutlinePass(new Vector2(), scene, getCamera(), outlineSelects);
export default outlinePass;
getCamera(camera => outlinePass.renderCamera = camera);
createEffect(() => {
    var _a;
    const color = getOutlineColor();
    const hiddenColor = (_a = getOutlineHiddenColor()) !== null && _a !== void 0 ? _a : color;
    outlinePass.visibleEdgeColor = new Color(color);
    outlinePass.hiddenEdgeColor = new Color(hiddenColor);
}, [getOutlineColor, getOutlineHiddenColor]);
createEffect(() => {
    const url = getOutlinePattern();
    if (!url)
        return;
    outlinePass.patternTexture = loadTexture(url);
    outlinePass.usePatternTexture = true;
    return () => {
        outlinePass.usePatternTexture = false;
    };
}, [getOutlinePattern]);
getOutlinePulse(pulse => outlinePass.pulsePeriod = pulse * 0.001);
getOutlineStrength(strength => outlinePass.edgeStrength = strength);
getOutlineThickness(thickness => outlinePass.edgeThickness = thickness);
