import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { h } from "preact";
import { useState } from "preact/hooks";
import { preventTreeShake } from "@lincode/utils";
import CubeIcon from "./icons/CubeIcon";
import ExpandIcon from "./icons/ExpandIcon";
import CollapseIcon from "./icons/CollapseIcon";
import { makeTreeItemCallbacks } from "./TreeItem";
preventTreeShake(h);
const Object3DTreeItem = ({ appendable, object3d, level }) => {
    const expandIconStyle = { opacity: object3d.children.length ? 0.5 : 0.05, cursor: "pointer" };
    const [expanded, setExpanded] = useState(false);
    const { setClickEl, handleClick, handleDoubleClick } = makeTreeItemCallbacks();
    return (_jsxs("div", { ref: setClickEl, onClick: handleClick, onDblClick: handleDoubleClick, onDragStart: e => e.stopPropagation(), onDragEnd: e => e.stopPropagation(), onDragOver: e => (e.stopPropagation(), e.preventDefault()), onDragEnter: e => (e.stopPropagation(), e.preventDefault()), onDragLeave: e => e.stopPropagation(), onDrop: e => e.stopPropagation(), style: {
            color: "rgba(255, 255, 255, 0.75)",
            marginLeft: 8,
            borderLeft: "1px solid rgba(255, 255, 255, 0.05)"
        }, children: [_jsxs("div", { style: {
                    display: "flex",
                    alignItems: "center",
                    // backgroundColor: selectionTarget === appendable ? "rgba(255, 255, 255, 0.1)" : undefined,
                    cursor: "default"
                }, children: [expanded ? (_jsx(CollapseIcon, { style: expandIconStyle, onClick: () => setExpanded(false) })) : (_jsx(ExpandIcon, { style: expandIconStyle, onClick: () => setExpanded(true) })), _jsx(CubeIcon, {}), object3d.name] }), expanded && object3d.children.map(child => (_jsx(Object3DTreeItem, { object3d: child, appendable: appendable, level: level + 1 }, child.uuid)))] }));
};
export default Object3DTreeItem;
