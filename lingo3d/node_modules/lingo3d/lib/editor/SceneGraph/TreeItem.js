import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { h } from "preact";
import { useState } from "preact/hooks";
import { preventTreeShake, upperFirst } from "@lincode/utils";
import CubeIcon from "./icons/CubeIcon";
import ExpandIcon from "./icons/ExpandIcon";
import CollapseIcon from "./icons/CollapseIcon";
import { useMultipleSelectionTargets, useSelectionTarget } from "../states";
import { emitEditorCenterView } from "../../events/onEditorCenterView";
import Model from "../../display/Model";
import ModelTreeItem from "./ModelTreeItem";
import { emitSelectionTarget } from "../../events/onSelectionTarget";
import useClick from "./useClick";
import PositionedItem from "../../api/core/PositionedItem";
import { getCamera, setCamera } from "../../states/useCamera";
import mainCamera from "../../engine/mainCamera";
preventTreeShake(h);
export const makeTreeItemCallbacks = (appendable) => {
    const setClickEl = useClick(e => {
        e.stopPropagation();
        if (!(appendable instanceof PositionedItem))
            return;
        if (getCamera() !== mainCamera) {
            setCamera(mainCamera);
            emitEditorCenterView(appendable);
        }
        emitSelectionTarget(appendable);
    });
    const handleClick = (e) => e.stopPropagation();
    const handleDoubleClick = (e) => {
        e.stopPropagation();
        if (!(appendable instanceof PositionedItem))
            return;
        emitEditorCenterView(appendable);
    };
    return { setClickEl, handleClick, handleDoubleClick };
};
export const draggingItemPtr = [undefined];
const TreeItem = ({ appendable, level, children }) => {
    //@ts-ignore
    const name = appendable.name || upperFirst(appendable.constructor.componentName);
    const appendableChildren = appendable.children ? [...appendable.children] : undefined;
    const expandIconStyle = { opacity: ((appendableChildren === null || appendableChildren === void 0 ? void 0 : appendableChildren.length) || children) ? 0.5 : 0.05, cursor: "pointer" };
    const [dragOver, setDragOver] = useState(false);
    const [expanded, setExpanded] = useState(false);
    // const [expanded, setExpanded] = useState(!!appendableChildren?.length)
    const [selectionTarget] = useSelectionTarget();
    const [multipleSelectionTargets] = useMultipleSelectionTargets();
    const selected = selectionTarget === appendable || multipleSelectionTargets.includes(appendable);
    const { setClickEl, handleClick, handleDoubleClick } = makeTreeItemCallbacks(appendable);
    return (_jsxs("div", { ref: setClickEl, onClick: handleClick, onDblClick: handleDoubleClick, draggable: true, onDragStart: e => (e.stopPropagation(), draggingItemPtr[0] = appendable), onDragEnd: e => (e.stopPropagation(), draggingItemPtr[0] = undefined), onDragOver: e => {
            e.stopPropagation();
            e.preventDefault();
            if (!draggingItemPtr[0] || draggingItemPtr[0] === appendable)
                return;
            setDragOver(true);
        }, onDragEnter: e => {
            e.stopPropagation();
            e.preventDefault();
            if (!draggingItemPtr[0] || draggingItemPtr[0] === appendable)
                return;
            setDragOver(true);
        }, onDragLeave: e => {
            e.stopPropagation();
            if (!draggingItemPtr[0] || draggingItemPtr[0] === appendable)
                return;
            setDragOver(false);
        }, onDrop: e => {
            e.stopPropagation();
            if (!draggingItemPtr[0] || draggingItemPtr[0] === appendable)
                return;
            setDragOver(false);
            appendable.attach(draggingItemPtr[0]);
        }, style: {
            color: "rgba(255, 255, 255, 0.75)",
            marginLeft: 8,
            borderLeft: "1px solid rgba(255, 255, 255, 0.05)",
            background: dragOver ? "rgba(255, 255, 255, 0.5)" : "none"
        }, children: [_jsxs("div", { style: {
                    display: "flex",
                    alignItems: "center",
                    backgroundColor: selected ? "rgba(255, 255, 255, 0.1)" : undefined,
                    cursor: "default"
                }, children: [expanded ? (_jsx(CollapseIcon, { style: expandIconStyle, onClick: () => setExpanded(false) })) : (_jsx(ExpandIcon, { style: expandIconStyle, onClick: () => setExpanded(true) })), _jsx(CubeIcon, {}), name] }), expanded && (appendableChildren === null || appendableChildren === void 0 ? void 0 : appendableChildren.map(childAppendable => (childAppendable instanceof Model ? (_jsx(ModelTreeItem, { appendable: childAppendable, level: level + 1 })) : (_jsx(TreeItem, { appendable: childAppendable, level: level + 1 }, childAppendable.uuid))))), expanded && children] }));
};
export default TreeItem;
